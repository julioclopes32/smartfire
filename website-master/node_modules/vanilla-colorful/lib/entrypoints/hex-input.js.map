{"version":3,"file":"hex-input.js","sourceRoot":"","sources":["../../src/lib/entrypoints/hex-input.ts"],"names":[],"mappings":"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","sourcesContent":["import { validHex } from '../utils/validate.js';\nimport { createTemplate, createRoot } from '../utils/dom.js';\n\nconst template = createTemplate('<slot><input part=\"input\" spellcheck=\"false\"></slot>');\n\n// Escapes all non-hexadecimal characters including \"#\"\nconst escape = (hex: string) => hex.replace(/([^0-9A-F]+)/gi, '').substr(0, 6);\n\nconst $color = Symbol('color');\nconst $saved = Symbol('saved');\nconst $input = Symbol('saved');\nconst $update = Symbol('update');\n\nexport class HexInputBase extends HTMLElement {\n  static get observedAttributes(): string[] {\n    return ['color'];\n  }\n\n  private [$color]!: string;\n\n  private [$saved]!: string;\n\n  private [$input]!: HTMLInputElement;\n\n  get color(): string {\n    return this[$color];\n  }\n\n  set color(hex: string) {\n    this[$color] = hex;\n    this[$update](hex);\n  }\n\n  connectedCallback(): void {\n    const slot = createRoot(this, template).firstElementChild as HTMLSlotElement;\n    const setInput = () => {\n      let input = this.querySelector('input');\n      if (!input) {\n        // remove all child node if no input found\n        let c;\n        while ((c = this.firstChild)) {\n          this.removeChild(c);\n        }\n        input = slot.firstChild as HTMLInputElement;\n      }\n      input.addEventListener('input', this);\n      input.addEventListener('blur', this);\n      this[$input] = input;\n    };\n    slot.addEventListener('slotchange', setInput);\n    setInput();\n\n    // A user may set a property on an _instance_ of an element,\n    // before its prototype has been connected to this class.\n    // If so, we need to run it through the proper class setter.\n    if (this.hasOwnProperty('color')) {\n      const value = this.color;\n      delete this['color' as keyof this];\n      this.color = value;\n    } else if (this.color == null) {\n      this.color = this.getAttribute('color') || '';\n    } else if (this[$color]) {\n      this[$update](this[$color]);\n    }\n  }\n\n  handleEvent(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    const { value } = target;\n    switch (event.type) {\n      case 'input':\n        const hex = escape(value);\n        this[$saved] = this.color;\n        if (validHex(hex)) {\n          this.color = hex;\n          this.dispatchEvent(\n            new CustomEvent('color-changed', { bubbles: true, detail: { value: '#' + hex } })\n          );\n        }\n        break;\n      case 'blur':\n        if (!validHex(value)) {\n          this.color = this[$saved];\n        }\n    }\n  }\n\n  attributeChangedCallback(_attr: string, _oldVal: string, newVal: string): void {\n    if (this.color !== newVal) {\n      this.color = newVal;\n    }\n  }\n\n  private [$update](hex: string): void {\n    if (this[$input]) {\n      this[$input].value = hex == null || hex == '' ? '' : escape(hex);\n    }\n  }\n}\n"]}